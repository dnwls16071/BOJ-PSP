# 어떤 정수 X가 1보다 큰 제곱수로 나누어 떨어지지 않을 때, 그 수를 제곱ㄴㄴ수라고 한다. 제곱수는 정수의 제곱이다. min과 max가 주어지면, min보다 크거나 같고, max보다 작거나 같은 제곱ㄴㄴ수가 몇 개 있는지 출력한다.

min, max = map(int, input().split())
# 최솟갑과 최댓값 사이의 값을 돌리면서 배열을 형성
# 이 배열을 0부터 시작하는 값으로 평행이동시키는 개념이라고 생각
validation_lst = [1 for _ in range(min, max+1)]

# 어떤 정수 X가 1보다 큰 제곱수로 나누어 떨어지지 않아야하므로 초기값은 2로 시작
num = 2
while num * num <= max:  # 제곱수가 최댓값보다 작을때
    tmp = min // (num**2)   # 제곱수의 몫
    while tmp * (num**2) <= max:  # 제곱수의 배수가 최댓값보다 작거나 같을때만 실행
        if tmp * (num**2) - min >= 0 and tmp * (num**2) - min <= max - min: # 제곱수의 배수가 0보다 크거나 같아야하고 제곱수의 배수가 max-min보다는 작거나 같아야만 실행
            validation_lst[tmp * (num**2) - min] = 0    # 그 값은 제곱수의 배수로 제곱ㄴㄴ수가 아니므로 값을 0으로 저장한다.
        tmp += 1    # 몫을 1만큼 증가
    num += 1

print(sum(validation_lst))

# 소수를 걸러내는 에라토스테네스의 체 개념이 사용되었다.
# 문제에서 예시로 준 1, 10에 대해서 설명하면 다음과 같다.
# 1보다 큰 제곱수로는 4, 9, 16, 25...이 있다.
# 1~10사이의 수에서 제곱수 4로 나누어 떨어지는 수는 4, 8이다.
# 1~10사이의 수에서 제곱수 9로 나누어 떨어지는 수는 9이다.
# 따라서 10개의 수 중에서 3개의 수를 빼면 답은 7이 된다.


