# 정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

# X가 3으로 나누어 떨어지면, 3으로 나눈다.
# X가 2로 나누어 떨어지면, 2로 나눈다.
# 1을 뺀다.
# 정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

N = int(input())
dp = [0] * 1000000

# 0을 1로 만드는 방법은 없으므로 값은 0
# 1을 1로 만드는 방법은 없으므로(이미 같은값) 값은 0
# 즉, 0~1은 안 건드려도 되는 값 > 따라서 2부터 시작한다
for i in range(2, N+1):
    dp[i] = dp[i-1] + 1
    
    if i % 2 == 0:  # 현재의 수가 2로 나누어 떨어지는 경우
        dp[i] = min(dp[i], dp[i//2]+1)
    if i % 3 == 0:  # 현재의 수가 3으로 나누어 떨어지는 경우
        dp[i] = min(dp[i], dp[i//3]+1)
print(dp[N])

# dp[i] = i를 1로 만들기 위한 최소 연산 횟수
# 점화식 => dp[i] = min(dp[i], dp[i//2], dp[i//3]) + 1
# 각각의 연산은 해당 수로 나누어떨어질 때에 한해 점화식을 적용할 수 있다.

