# 두 자연수 A와 B가 있을 때, A = BC를 만족하는 자연수 C를 A의 약수라고 한다. 예를 들어, 2의 약수는 1, 2가 있고, 24의 약수는 1, 2, 3, 4, 6, 8, 12, 24가 있다. 자연수 A의 약수의 합은 A의 모든 약수를 더한 값이고, f(A)로 표현한다. x보다 작거나 같은 모든 자연수 y의 f(y)값을 더한 값은 g(x)로 표현한다.
#
# 자연수 N이 주어졌을 때, g(N)을 구해보자.

def f(A):
    total = 0
    for i in range(1, A+1):
        if A % i == 0:
            total += i
    return total

def g(x):
    total = 0
    while x != 0:
        if x > 0:
            total += f(x)
            x -= 1
    return total

N = int(input())
print(g(N))

# 위와 같은 일반적인 함수식으로 코드를 작성하는 경우 시간초과가 나왔다.

N = int(input())
sum = 0
for i in range(1, N+1):
    sum += (N//i)*i
print(sum)

# 구글링해서 코드를 이해하고 다음과 같은 메커니즘으로 설명할 수 있다는 것을 알게 되었다.
# 예를 들어 설명해보면 다음과 같다.(N = 10인 경우를 가정해서 설명)
# 1은 10이하의 자연수의 약수로 총 10번(1~10) 등장한다. => 모든 합을 구하면 (10 // 1) * 1 = 10
# 2는 10이하의 자연수의 약수로 총 5번(2, 4, 6, 8, 10) 등장한다. => 모든 합을 구하면 (10 // 2) * 2 = 10
# 3은 10이하의 자연수의 약수로 총 3번(3, 6, 9) 등장한다. => 모든 합을 구하면 (10 // 3) * 3 = 9

# 따라서 정리해보면 i는 N이하의 자연수의 약수로 총 (N // i)번 등장한다. 약수들의 합을 구하면 (나온 횟수) * (해당 약수)가 되므로 (N // i) * i
