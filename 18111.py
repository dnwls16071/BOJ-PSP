# 팀 레드시프트는 대회 준비를 하다가 지루해져서 샌드박스 게임인 ‘마인크래프트’를 켰다. 마인크래프트는 1 × 1 × 1(세로, 가로, 높이) 크기의 블록들로 이루어진 3차원 세계에서 자유롭게 땅을 파거나 집을 지을 수 있는 게임이다.
#
# 목재를 충분히 모은 lvalue는 집을 짓기로 하였다. 하지만 고르지 않은 땅에는 집을 지을 수 없기 때문에 땅의 높이를 모두 동일하게 만드는 ‘땅 고르기’ 작업을 해야 한다.
#
# lvalue는 세로 N, 가로 M 크기의 집터를 골랐다. 집터 맨 왼쪽 위의 좌표는 (0, 0)이다. 우리의 목적은 이 집터 내의 땅의 높이를 일정하게 바꾸는 것이다. 우리는 다음과 같은 두 종류의 작업을 할 수 있다.
#
# 좌표 (i, j)의 가장 위에 있는 블록을 제거하여 인벤토리에 넣는다.
# 인벤토리에서 블록 하나를 꺼내어 좌표 (i, j)의 가장 위에 있는 블록 위에 놓는다.
# 1번 작업은 2초가 걸리며, 2번 작업은 1초가 걸린다. 밤에는 무서운 몬스터들이 나오기 때문에 최대한 빨리 땅 고르기 작업을 마쳐야 한다. ‘땅 고르기’ 작업에 걸리는 최소 시간과 그 경우 땅의 높이를 출력하시오.
#
# 단, 집터 아래에 동굴 등 빈 공간은 존재하지 않으며, 집터 바깥에서 블록을 가져올 수 없다. 또한, 작업을 시작할 때 인벤토리에는 B개의 블록이 들어 있다. 땅의 높이는 256블록을 초과할 수 없으며, 음수가 될 수 없다.

import sys
input = sys.stdin.readline
N, M, B = map(int, input().split())
ground = [list(map(int, input().split())) for _ in range(N)]
standard = 100000000000000000000000000000000
height = 0

for h in range(257):
    use = 0         # 사용하려는 블록의 개수
    remove = 0      # 제거하려는 블록의 개수
    for n in range(N):
        for m in range(M):
            if ground[n][m] < h:            # 블록의 높이가 현재 층수보다 낮다면?
                use += (h - ground[n][m])     # 현재 층수에서 블록의 높이만큼 뺀 값을 넣어줘야됨
            else:                           # 블록의 높이가 현재 층수보다 높거나 같다면?
                remove += (ground[n][m] - h)  # 블록의 높이에서 현재 층수만큼 뺀 값을 넣어줘야됨
    inventory = remove + B  # 인벤토리에 있는 블록의 개수 : 현재 인벤토리 블록 값 + 제거해서 인벤토리에 넣는 블록의 개수
    if inventory < use: # 만약 인벤토리에 있는 블록 개수보다 사용하는 블록 개수가 더 많으면?
        continue
    # 좌표의 블록을 제거해 인벤토리에 넣는 것은 2초, 인벤토리에서 블록 하나를 꺼내서 좌표의 위에 놓는 것은 1초 소요
    time = 2 * remove + use
    if time <= standard:
        standard = time
        height = h
print(standard, height)

# 직접 그림을 그리면서 이해했던 문제였다.
# Python3로는 시간초과가 발생했지만 PyPy3로는 통과했다.

# 문제를 풀면서 항상 테스트케이스에만 집중해서 그 결과를 도출해야낸다는 강박관념에 다른 예외 케이스를 생각하지 못하는 것 같다.
# 테스트케이스는 하나의 예제일뿐 너무 맹목적으로 파고들려고 하면 안되겠다.
# 문제 서론에 나와있는 부분 중에서 문제를 푸는데 결정적인 힌트를 제공하거나 문제의 초안을 주는 경우도 있다,
# 따라서 문제 서론도 필요한 부분은 체크하고 테스트케이스 정답이 어떻게 나오는지 꼼꼼히 확인해야겠다.


